{"version":3,"sources":["index.js"],"names":["incoming","storyText","padding","prompt","test","choices","chindex","frindex","isLoading","isKeyPressed","isTesting","isGlitching","preload","getAICompletion","setup","createCanvas","windowWidth","windowHeight","draw","push","fill","textSize","textAlign","CENTER","translate","width","height","text","pop","random","background","clear","pWidth","pHeight","story","replace","textWrap","WORD","textFont","LEFT","BOTTOM","substring","length","drawGlitch","frameRate","getChoices","setTimeout","clearTimeout","fetch","method","headers","Authorization","body","JSON","stringify","model","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","best_of","echo","logprobs","then","r","json","d","_text","windowResized","resizeCanvas","keyPressed","newPrompt","keyCode","alert","inText","spl","split","i","print","sq","stroke","rect"],"mappings":"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","file":"src.c40d8dff.js","sourceRoot":"../src","sourcesContent":["let prompt = \"write a text-based horror adventure prompt, with 2-3 choices numbered\";\nlet test = `write a text-based horror adventure prompt, with 2-3 choices numbered\n\nYou wake up in a strange room with no windows and one door. \n\n\t1\tExamine the room for clues\n2. Try the door\n3. Scream for help\n\nTry the door\nYou cautiously approach the door and reach for the handle. The door is locked. \n\n\t1\tLook for a key\n2. Try to break down the door\n3. Scream for help\n\nScream for help\nYou call out for help, but the only response is a deep, menacing laugh from somewhere in the room. \n\n\t1\tHide\n2. Search the room for the source of the laugh\n3. Try to break down the door\n\nSearch the room for the source of the laugh\nYou slowly move around the room, searching for the source of the laugh. You finally find it: a tall figure in a dark cloak standing in the corner of the room. \n\n\t1\tRun for the door\n2. Talk to the figure\n3. Attack the figure\n\nScream for help\nYou call out for help, but the only response is a deep, menacing laugh from somewhere in the room. \n\n\t1\tHide\n2. Search the room for the source of the laugh\n3. Try to break down the door\n\nSearch the room for the source of the laugh\nYou slowly move around the room, searching for the source of the laugh. You finally find it: a tall figure in a dark cloak standing in the corner of the room. \n`;\nlet choices = {\n    1: \"\",\n    2: \"\",\n    3: \"\",\n};\nlet incoming;\nlet storyText;\nlet chindex = 1;\nlet frindex = 30;\nlet padding;\nlet isLoading = true;\nlet isKeyPressed = false;\nlet isTesting = false;\nlet isGlitching = 7;\n\nfunction preload() {\n    getAICompletion();\n}\n\nfunction setup() {\n    createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n    if (!storyText || isLoading) {\n        push();\n            fill('#FFC107');\n            textSize(16);\n            textAlign(CENTER);\n            translate((width/2), height - 50);\n            text(\"Loading...\", 0, 0);\n        pop();\n        return;\n    }\n    if (random() > 0.75) {\n        background(255, 255, 255, 0.3);\n    } else {\n        clear();\n    }\n    fill('green');\n    let padding = width / 5;\n    let pWidth = width - padding;\n    let pHeight = height - padding;\n    let story = storyText.replace(prompt, \"Type 1, 2, or 3 on the keyboard to continue the story.\");\n    textWrap(WORD);\n    textFont(\"Times New Roman\");\n    textSize(20);\n    textAlign(LEFT, BOTTOM);\n    text(story.substring(0, chindex), 60, 0, width > 600 ? pWidth : width - 60, pHeight);\n    if (chindex < story.length) {\n        chindex++;\n        drawGlitch();\n        frameRate(random(20, frindex += 0.2));\n    }\n    if (choices.length < 1) {\n        push();\n            fill('#FFC107');\n            textSize(16);\n            textAlign(CENTER);\n            translate((width/2), height - 50);\n            text(\"\\nThere are no choices.\", 0, 0);\n        pop();\n    }\n    // frameRate(100);\n}\n\nfunction getAICompletion() {\n    isLoading = true;\n    if (isTesting) {\n        incoming = test;\n        getChoices(storyText ? incoming.substring(storyText.length) : incoming); // get choices from most recent text\n        storyText = incoming;\n        setTimeout(() => {\n            isLoading = false;\n            clearTimeout();\n        }, 500);\n        return;\n    }\n    fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization:\n                \"Bearer sess-QTLLs1UOLM752lCXVsLd1NSKrYaWeBtTuumGl5Ux\",\n        },\n        body: JSON.stringify({\n            model: \"text-davinci-003\",\n            prompt: (storyText ? storyText : prompt),\n            max_tokens: 256,\n            temperature: 0.7,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0,\n            best_of: 1,\n            echo: true,\n            logprobs: 0\n        }),\n    })\n        .then((r) => r.json())\n        .then((d) => {\n            let _text = d.choices[0].text;\n            incoming = storyText ? _text.substring(storyText.length) : _text;\n            getChoices(incoming); // get choices from most recent text\n            storyText = _text;\n            isLoading = false;\n            isKeyPressed = false;\n            // print({ storyText });\n        });\n}\n\nfunction windowResized() {\n    resizeCanvas(windowWidth, windowHeight);\n}\n\nfunction keyPressed() {\n    let newPrompt;\n    if (isKeyPressed) return;\n    isKeyPressed = true;\n    switch (keyCode) {\n        case 49:\n            if (choices[1]) newPrompt = choices[1];\n            break;\n        case 50:\n            if (choices[2]) newPrompt = choices[2];\n            break;\n        case 51:\n            if (choices[3]) newPrompt = choices[3];\n            else alert(\"please choose a valid choice\");\n            break;\n        default:\n            break;\n    }\n    // print(prompt);\n    if (newPrompt) {\n        storyText += \"\\n\\n\" + newPrompt + \"\\n\";\n        push();\n            fill('#FFC107');\n            textSize(16);\n            textAlign(CENTER);\n            translate((width/2), height - 75);\n            text(newPrompt, 0, 0);\n        pop();\n        getAICompletion();\n    }\n}\n\nfunction getChoices(inText) {\n    if (!inText) return;\n    let spl = inText.split(/\\n[1-3][.]*/g);\n    for (let i = 1; i < 4; i++) {\n        if (spl[i]) choices[i] = spl[i];\n    }\n    print({ choices });\n}\n\nfunction drawGlitch() {\n    if (random() > 0.998 || isGlitching < 7) {\n        isGlitching = isGlitching === 0 ? 7 : isGlitching - 1;\n        for (let i = 0; i < 75; i++) {\n            let sq = random(5, 11);\n            push();\n            stroke('rgba(163,255,197,0.56)');\n            fill('rgba(158,158,158,0.64)');\n            if (random() > 0.99) fill('rgba(75,75,75,0.55)');\n            rect(random(0, width), random(0, height), sq, sq);\n            pop();\n        }\n    }\n}\n"]}